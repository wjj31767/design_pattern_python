"""
单例模式是一种常用的设计模式，它确保一个类只有一个实例，并提供一个全局访问点来获取这个实例。以下从概念、优缺点、使用场景、实现方式等方面为你详细介绍单例模式。
概念
单例模式是一种创建型设计模式，该模式下类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。
优缺点
优点
减少资源占用：由于单例模式只创建一个实例，避免了频繁创建和销毁对象带来的资源消耗，提高了性能。
全局访问：提供了一个全局访问点，使得系统中所有的模块都可以方便地访问这个唯一实例，便于数据共享和状态管理。
避免冲突：在某些场景下，多个实例可能会导致数据不一致或冲突，单例模式可以有效避免这种情况。
缺点
违背单一职责原则：单例类既负责创建对象，又负责管理对象的生命周期和提供全局访问，职责过重。
扩展性差：单例类的实现通常是静态的，难以进行扩展和修改。
多线程问题：在多线程环境下，如果没有进行适当的同步处理，可能会创建多个实例，破坏单例模式的规则。
使用场景
日志记录器：在一个应用程序中，通常只需要一个日志记录器来记录系统的运行信息，避免多个日志记录器同时操作导致日志文件混乱。
数据库连接池：数据库连接是一种有限的资源，使用单例模式可以确保整个应用程序中只有一个数据库连接池，提高资源利用率。
配置文件管理：应用程序的配置信息通常只需要加载一次，使用单例模式可以保证配置信息的一致性和全局访问性。
实现方式
以下是几种常见的单例模式实现方式。
饿汉式
饿汉式是在类加载时就创建了单例实例，因此不存在线程安全问题。示例代码如下：
"""
class Singleton:
    _instance = None
    def __new__(cls):
        if not cls._instance:
            cls._instance = super().__new__(cls)
        return cls._instance

# 使用示例
s1 = Singleton()
s2 = Singleton()
print(s1 is s2)
